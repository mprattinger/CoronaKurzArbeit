@using Models
@using Data
@using Extensions;
@using Services;

<button @onclick="RegisterTime" class="@Classes">Zeit buchen</button>

@code {

    [Inject]
    public IModalService Modal { get; set; } = default!;

    [Inject]
    public IAppState AppState { get; set; } = default!;

    [Inject]
    public ApplicationDbContext Context { get; set; } = default!;

    [Parameter]
    public DateTime AtDate { get; set; } = DateTime.MinValue;

    [Parameter]
    public string Class { get; set; } = "";

    public DateTime CurrentDate { get; set; } = DateTime.Now.Date;

    private string fixedClass = "btn btn-primary btn-block";
    private string Classes
    {
        get
        {
            return $"{fixedClass} {Class}";
        }
    }

    protected override void OnInitialized()
    {
        AppState.OnCurrentDayChanged += OnCurrentDayChanged_event;
    }

    private void OnCurrentDayChanged_event(DateTime theDay)
    {

    }

    async Task RegisterTime()
    {
        var baseDate = AtDate == DateTime.MinValue ? CurrentDate : AtDate;
        var param = new ModalParameters();
        var tb = new TimeBooking();
        tb.BookingTime = baseDate.Date.AddHours(DateTime.Now.Hour).AddMinutes(DateTime.Now.Minute);
        param.Add(nameof(BookTime.Booking2Change), tb);
        var ret = Modal.Show<BookTime>("Zeit buchen", param);
        var result = await ret.Result;
        if (!result.Cancelled)
        {
            var changed = (TimeBooking)result.Data;
            Context.TimeBookings?.Add(changed);
            await Context.SaveChangesAsync();
            await AppState.RegisteredAsync(changed);
            StateHasChanged();
        }
    }
}
