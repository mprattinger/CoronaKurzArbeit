@using Extensions
        <div class="toggle-day-container">
            <div class="toggle-day-controls-container">
                <div class="toggle-day-controls-left">
                    <div class="toggle-day-controls">
                        <button @onclick="back" class="btn btn-primary">Zurück</button>
                        <span>@CurrentDate.ToShortDateString()</span>
                        <button @onclick="next" class="btn btn-primary">Nächster</button>
                    </div>
                    <Register Class="toggle-day-content-register" />
                </div>
                <div class="toggle-day-controls-right">
                    <Info />
                </div>
            </div>
            <div class="toggle-day-content">

                @ChildContent

            </div>
        </div>
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Inject]
    public IAppState AppState { get; set; } = default!;

    public DateTime CurrentDate { get; set; } = DateTime.Now.Date;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AppState.CurrentDayChangedAsync(CurrentDate);
        }
    }


    async Task back()
    {
        CurrentDate = CurrentDate.AddDays(-1);
        await AppState.CurrentDayChangedAsync(CurrentDate);
    }

    async Task next()
    {
        CurrentDate = CurrentDate.AddDays(1);
        await AppState.CurrentDayChangedAsync(CurrentDate);
    }
}
